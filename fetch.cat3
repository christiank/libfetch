These functions implement a high-level library for retrieving and
uploading files using Uniform Resource Locators (URLs).  takes  a
URL  in  the  form of a null-terminated string and splits it into
its components function according to the Common  Internet  Scheme
Syntax detailed in RFC 1738.  A regular expression which produces
this  syntax  is:  scheme:(//(user(:pwd)?@)?host(:port)?)?/(docu-
ment)?   If the URL does not seem to begin with a scheme name, it
is assumed to be a local path.  Only absolute path names are  ac-
cepted.  Note that some components of the URL are not necessarily
relevant to all URL schemes.  For instance, the file scheme  only
needs the and components.  quotes any unsafe character in the URL
automatically.  This is not done by copies an existing structure.
and  return a pointer to a structure, which is defined as follows
in #define  URL_SCHEMELEN  16  #define  URL_USERLEN  256  #define
URL_PWDLEN 256 #define URL_HOSTLEN 255

struct url {
    char         scheme[URL_SCHEMELEN + 1];
    char         user[URL_USERLEN + 1];
    char         pwd[URL_PWDLEN + 1];
    char         host[URL_HOSTLEN + 1];
    int          port;
    char        *doc;
    off_t        offset;
    size_t       length;
    time_t        last_modified;  };  The pointer returned by and
should be freed using The size of is not part of  the  ABI.   and
constitute  the recommended interface to the library.  They exam-
ine the URL passed to them to determine the transfer method,  and
call  the appropriate lower-level functions to perform the actual
transfer.  also returns the remote  document's  metadata  in  the
structure  pointed  to by the argument.  The argument is a string
of characters which specify transfer options.  The meaning of the
individual  flags is scheme-dependent, and is detailed in the ap-
propriate section below.  attempts to obtain the requested  docu-
ment's  metadata and fill in the structure pointed to by its sec-
ond argument.  The structure is  defined  as  follows  in  struct
url_stat {
    off_t        size;
    time_t       atime;
    time_t       mtime; }; If the size could not be obtained from
the server, the field is set to -1.   If  the  modification  time
could  not  be  obtained from the server, the field is set to the
epoch.  If the access time could not be obtained from the server,
the  field is set to the modification time.  attempts to list the
contents of the directory pointed to by the  URL  provided.   The
pattern  can  be  a simple glob-like expression as hint.  Callers
should not depend on the server to filter names.  If  successful,
it  appends  the list of entries to the structure.  The structure
is defined as follows in struct url_list {
    size_t      length;
    size_t      alloc_size;
    struct url  *urls; }; The list should be initialized by call-
ing  and  the  entries  be  freed  by  calling returns the URL as
string.  returns the path name part of the URL with  any  quoting
undone.  Query arguments and fragment identifiers are not includ-
ed.  returns the last component of the path name as  returned  by
and  return  a  string that should be deallocated with after use.
and are similar to and except that they expect a  pre-parsed  URL
in  the  form of a pointer to a rather than a string.  All of the
and functions return a pointer to a stream which can be  used  to
read or write data from or to the requested document, respective-
ly.  Note that although the implementation details of  the  indi-
vidual  access  methods  vary, it can generally be assumed that a
stream returned by one of the or functions is read-only, and that
a  stream returned by one of the functions is write-only.  If the
(if-modified-since) flag is specified, the library  will  try  to
fetch the content only if it is newer than For HTTP an HTTP head-
er is sent.  For FTP a command is sent first and compared  local-
ly.  For FILE the source file is compared.  and provide access to
documents which are files in a locally mounted file system.  Only
the  component  of the URL is used.  and do not accept any flags.
accepts the (append to file) flag.  If that  flag  is  specified,
the  data  written  to the stream returned by will be appended to
the previous contents of the file,  instead  of  replacing  them.
and  implement  the FTP protocol as described in RFC 959.  By de-
fault will attempt to use passive mode first and only fallback to
active  mode  if  the server reports a syntax error.  If the (ac-
tive) flag is specified, a passive connection is  not  tried  and
active  mode  is  used directly.  If the (low) flag is specified,
data sockets will be allocated in the low (or default) port range
instead of the high port range (see If the (direct) flag is spec-
ified, and will use a direct connection even if a proxy server is
defined.   If no user name or password is given, the library will
attempt an anonymous login, with user name "anonymous" and  pass-
word  "anonymous@hostname".   The  and  functions  implement  the
HTTP/1.1 protocol.  With a little luck, there is  even  a  chance
that  they  comply  with  RFC 2616 and RFC 2617.  If the (direct)
flag is specified, and will use a direct  connection  even  if  a
proxy  server is defined.  Since there seems to be no good way of
implementing the HTTP PUT method in a manner consistent with  the
rest of the library, is currently unimplemented.  Apart from set-
ting the appropriate environment variables and specifying the us-
er  name  and  password in the URL or the the calling program has
the option of defining an authentication function with  the  fol-
lowing  prototype:  The  callback function should fill in the and
fields in the provided and return 0 on success, or any other val-
ue to indicate failure.  To register the authentication callback,
simply set to point at it.  The callback will be used whenever  a
site  requires  authentication  and  the  appropriate environment
variables are not set.  This interface is experimental and may be
subject  to  change.  returns a pointer to a containing the indi-
vidual components of the URL.  If it is unable to allocate  memo-
ry,  or  the  URL  is syntactically incorrect, returns a pointer.
The functions return 0 on success and -1 on failure.   All  other
functions return a stream pointer which may be used to access the
requested document, or if an error occurred.  The following error
codes are defined in Operation aborted Authentication failed Ser-
vice unavailable File exists File system full  Informational  re-
sponse  Insufficient memory File has moved Network error No error
Protocol error Resolver error Server error Temporary error Opera-
tion  timed  out  File is not available Unknown error Invalid URL
The accompanying error message includes a protocol-specific error
code  and  message,  e.g. "File is not available (404 Not Found)"
Specifies a host name or IP address to  which  sockets  used  for
outgoing  connections  will  be bound.  Default FTP login if none
was provided in the URL.  If set to anything but forces  the  FTP
code  to  use  passive  mode.  Default FTP password if the remote
server requests one and none was provided in the URL.  URL of the
proxy  to  use  for  FTP requests.  The document part is ignored.
FTP and HTTP proxies are supported; if no  scheme  is  specified,
FTP  is assumed.  If the proxy is an FTP proxy, will send as user
name to the proxy, where is the real user name, and is  the  name
of  the  FTP server.  If this variable is set to an empty string,
no proxy will be used for FTP requests, even if the  variable  is
set.   Same  as  for compatibility.  Specifies HTTP authorization
parameters as a colon-separated list of  items.   The  first  and
second  item are the authorization scheme and realm respectively;
further items are scheme-dependent.  Currently, only basic autho-
rization  is supported.  Basic authorization requires two parame-
ters: the user name and password, in that order.   This  variable
is  only  used  if  the server requires authorization and no user
name or password was specified in the URL.  URL of the  proxy  to
use  for HTTP requests.  The document part is ignored.  Only HTTP
proxies are supported for HTTP requests.  If no  port  number  is
specified,  the  default is 3128.  Note that this proxy will also
be used for FTP documents, unless the variable is set.   Same  as
for  compatibility.   Specifies  authorization parameters for the
HTTP proxy in the same format as the variable.  This variable  is
used if and only if connected to an HTTP proxy, and is ignored if
a user and/or a password were specified in the proxy URL.  Speci-
fies  the  referrer  URL to use for HTTP requests.  If set to the
document URL will be used as referrer URL.  Specifies  the  User-
Agent  string  to use for HTTP requests.  This can be useful when
working with HTTP origin or proxy servers that differentiate  be-
tween user agents.  Specifies a file to use instead of to look up
login names and passwords for FTP sites.  See for  a  description
of the file format.  This feature is experimental.  Either a sin-
gle asterisk, which disables the use of proxies altogether, or  a
comma-  or  whitespace-separated  list of hosts for which proxies
should not be used.  Same as  for  compatibility.   To  access  a
proxy server on port 8080, set the environment variable in a man-
ner similar to this: If the proxy server requires authentication,
there  are  two  options available for passing the authentication
data.  The first method is by using the  proxy  URL:  The  second
method     is     by     using    the    environment    variable:
HTTP_PROXY=http://proxy.example.com:8080      HTTP_PROXY_AUTH=ba-
sic:*:user:pwd  To  disable the use of a proxy for an HTTP server
running on the local host,  define  as  follows:  NO_PROXY=local-
host,127.0.0.1  The  library  first  appeared  in The library was
mostly written by with numerous suggestions from and other devel-
opers.   It replaces the older library written by and This manual
page was written by Some parts of the library are not yet  imple-
mented.  The most notable examples of this are and FTP proxy sup-
port.  There is no way to select a proxy at run-time  other  than
setting  the  or  environment variables as appropriate.  does not
understand or obey 305 (Use Proxy) replies.   Error  numbers  are
unique  only  within  a certain context; the error codes used for
FTP and HTTP overlap, as do those used for  resolver  and  system
errors.   For  instance, error code 202 means "Command not imple-
mented, superfluous at this site" in an FTP context and  "Accept-
ed"  in  an  HTTP  context.  does not check that the result of an
MDTM command is a valid date.  The man page is incomplete, poorly
written  and  produces badly formatted text.  The error reporting
mechanism is unsatisfactory.  Some parts of the code are not ful-
ly reentrant.






















